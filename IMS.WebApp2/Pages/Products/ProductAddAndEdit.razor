@page "/addproduct"
@page "/editproduct/{prodId:int}"  

@inject ICategoryRepository CategoryRepository 
@inject IProductRepository ProductRepository 
@inject NavigationManager NavigationManager
<h3>Product Add</h3>
<br/>
<EditForm  model ="product" OnValidSubmit="SaveProduct">
	<DataAnnotationsValidator></DataAnnotationsValidator>
	<ValidationSummary></ValidationSummary>

	<div class="form-group">
		<label for="name">Product Name</label>
		<InputText id="name"
			@bind-Value="product.Name"
			class="form-control">
		</InputText>
	</div>
	<div class="form-group">
		<label for="description">Description</label>
		<InputText id="description"
			@bind-Value="product.Description"
			class="form-control">
		</InputText>
	</div>
	<div class="form-group">
		<label for="price">Price</label>
		<InputNumber id="name"
			@bind-Value="product.Price"
			class="form-control">
		</InputNumber>
	</div>
		<div class="form-group">
		<label for="Category">Category</label>
		<InputSelect id="name"
			@bind-Value="product.CategoryId"
			class="form-control">
			@foreach (var category in categories)
			{
			  <option value="@category.Id">@category.Name</option>
			}
		</InputSelect>
	</div>
	<div class="form-group">
		<label for="image">Images</label>
		<div>
			<img src="@product.Image" style="width:250px; height: 250px;"/>
		</div>
		<InputFile OnChange="@OnInputFileChange" class="form-control"></InputFile>
	</div>
	<br/>
	<button type="submit" class="btn btn-primary">Save</button>
	<button type="button" class="btn btn-primary" @onclick="OnCancel">Cancel</button>
</EditForm>

@code {
	[Parameter]
	public int? ProdId{ get; set; }

	private ProductDTO product = new ProductDTO();
	private List<CategoryDTO> categories = new List<CategoryDTO>();

	protected override async Task OnParametersSetAsync()
	{
		if (ProdId!=null) this.product = await ProductRepository.GetProduct(this.ProdId.Value);
		this.categories = (await CategoryRepository.GetAllCategories("")).ToList();
	}

	private async Task SaveProduct()
	{
		if (ProdId != null)
		{
			 await ProductRepository.UpdateProduct(ProdId.Value,this.product);
		}
		else
		{
			await ProductRepository.CreateProduct(product);
		}
		
		NavigationManager.NavigateTo("/products");
	}
	protected override async  Task OnInitializedAsync()
	{
		this.categories = (await CategoryRepository.GetAllCategories()).ToList();
	}

	private void OnCancel()
	{
		NavigationManager.NavigateTo("/categories");
	}

	private async Task OnInputFileChange(InputFileChangeEventArgs inputFileChangeEventArgs)
	{
		var fileFormat = "image/png";
		// get file
	    var imageFile = await inputFileChangeEventArgs.File.RequestImageFileAsync(fileFormat, 250, 250);
		// convert file into a byte array
		var buffer = new byte[imageFile.Size];
		await imageFile.OpenReadStream().ReadAsync(buffer);
		// convert byte array into a base 64 string
		string imageDataUrl = $"data:{fileFormat};base64,{Convert.ToBase64String(buffer)}";
		product.Image = imageDataUrl;
	}
    
}